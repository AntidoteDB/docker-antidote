#!/usr/bin/env escript
%%! -smp enable -sname erlshell -setcookie secret -hidden


main([]) ->
    usage();
main([_]) ->
    usage();
main(NodesStr) ->
    Nodes = [list_to_atom(N) || N <- NodesStr],

    io:format("~n===============~n~p joining: ~p ~n===========~n", [node(), Nodes]),

    Descriptors = [ getDesc(Node) || Node <- Nodes ],

    lists:foreach(fun(Node) -> 
        Response = rpc:call(Node, antidote_dc_manager, subscribe_updates_from, [Descriptors], 60000),
        io:format("~n===============~nResponse from DC: ~p ~n===========~n", [Response])
                  end, 
                  Nodes).


getDesc(Node) ->
    {ok, Desc} = rpc:call(Node, antidote_dc_manager, get_connection_descriptor, []),
    Desc.


usage() ->
    io:format("NAME~n"),
    io:format("    join_dcs - joins antidote data centers together~n~n"),
    io:format("SYNOPSIS~n"),
    io:format("    join_dcs NODE NODE [NODE...] ~n~n"),
    io:format("DESCRIPTION~n"),
    io:format("    Joins two or more nodes together sequentially.~n"),
    io:format("    Ensure before usage that this script can connect to all required nodes (long vs short names, Erlang cookie).~n~n"),
    io:format("    NODE: Erlang node name~n~n"),
    io:format("EXAMPLES~n"),
    io:format("    join_dcs antidote@10.1.27.60 antidote@10.1.27.61 antidote@10.2.27.60~n"),
    io:format("        Join the three antidote instances together to replicate data two times~n").

